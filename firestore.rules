rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --------- Auth Helpers ---------
    function isAuthed()       { return request.auth != null; }
    function isAdmin()        { return isAuthed() && (request.auth.token.admin == true || request.auth.token.role == 'admin'); }
    function isCreator()      { return isAuthed() && (request.auth.token.role == 'creator' || request.auth.token.role == 'admin'); }
    function isOwner()        { return isAuthed() && resource.data.uid == request.auth.uid; }
    function creatingOwn()    { return isAuthed() && request.resource.data.uid == request.auth.uid; }
    function hasVisibility(d) { return d != null && (d.visibility == 'public' || d.visibility == 'private'); }

    // --------- Shared Helpers ---------
    function boardDocIsPublicRead()  { return resource.data.visibility == 'public' || resource.data.public == true; }
    function boardDocIsOwnerRead()   { return isAuthed() && resource.data.uid == request.auth.uid; }
    function boardDocIsOwnerWrite()  { return isAuthed() && request.resource.data.uid == request.auth.uid; }

    function validStatus(s) {
      return s == 'active' || s == 'archived' || s == null;
    }

    function pinUidToPath(uid)     { return request.resource.data.uid == uid; }
    function pinSpaceIdToPath(id)  { return request.resource.data.spaceId == id; }
    function pinCatIdToPath(id) {
      return (id == null && (request.resource.data.catId == null || request.resource.data.catId == '')) ||
             (id != null && request.resource.data.catId == id);
    }
    function pinFolderIdToPath(id) {
      return (id == null && (request.resource.data.folderId == null || request.resource.data.folderId == '')) ||
             (id != null && request.resource.data.folderId == id);
    }

    // --------- USERS COLLECTION ---------
    match /users/{uid} {
      allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

      match /private/{docId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

        match /contact {
          allow create: if (isAuthed() && request.auth.uid == uid || isAdmin()) &&
                        request.resource.data.keys().hasAll(['phone', 'address']) &&
                        request.resource.data.phone is string &&
                        request.resource.data.address is map &&
                        request.resource.data.address.keys().hasAll(['line1', 'city', 'region', 'postal', 'country']);

          allow read, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
        }
      }

      match /settings/{docId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
      }

      match /notifications/{nid} {
        allow read, update, delete: if isAuthed() && request.auth.uid == uid;
        allow create: if isAdmin() && request.resource.data.uid == uid;
      }

      match /closet/{docId} {
        allow read: if (hasVisibility(resource.data) && resource.data.visibility == 'public') ||
                        (isAuthed() && request.auth.uid == uid) || isAdmin();

        allow create, update: if hasVisibility(request.resource.data) &&
                                  request.resource.data.uid == uid &&
                                  ((isAuthed() && request.auth.uid == uid) || isAdmin());

        allow delete: if isAuthed() && request.auth.uid == uid || isAdmin();
      }

      match /categories/{catId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid;
      }

      match /planner/events/{eventId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid;
      }

      match /boards/{boardId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

        match /items/{itemId} {
          allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
        }
      }

      match /metrics/{coll}/{docId=**} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
      }

      match /spaces/{spaceId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

        match /items/{itemId} {
          allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
        }

        match /categories/{catId} {
          allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

          match /items/{itemId} {
            allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
          }

          match /folders/{folderId} {
            allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

            match /items/{itemId} {
              allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
            }
          }
        }
      }

      match /files/{categoryId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

        match /folders/{folderId} {
          allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();

          match /items/{itemId} {
            allow read, create, update, delete: if isAuthed() && request.auth.uid == uid || isAdmin();
          }
        }
      }

      match /panels/{panelId} {
        allow read, create, update, delete: if isAuthed() && request.auth.uid == uid;
      }
    }

    // --------- Public Resources & Admin Routes ---------
    match /panel_defs/{id}                  { allow read: if true; allow write: if isAdmin(); }
    match /categories/{panel}/items/{docId} { allow read: if true; allow write: if isAuthed(); }
    match /public/{docId}/items/{id}        { allow read: if true; allow write: if isAdmin(); }
    match /features_topics/{id}             { allow read: if true; allow write: if isAdmin(); }
    match /site_settings/{docId}            { allow read: if true; allow write: if isAdmin(); }
    match /site_messages/{id}               { allow write: if isAdmin(); }

    // ---- NEW: theme icons + login carousel cache ----
    match /themeIcons/{id} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }

    // Theme docs (editable by admins only). Audit subcollection is read-only to clients.
    match /themes/{themeId} {
      allow read: if true;
      allow write, update, delete: if isAdmin();

      match /audit/{aId} {
        allow read: if isAdmin();
        allow write, update, delete: if false; // audit entries are server-only
      }
    }

    // (Legacy) public mirror if you keep it
    match /public/themes/{themeId} { allow read: if true; allow write: if isAdmin(); }

    // Public login carousel cache
    match /public/login_themes { allow read: if true; allow write: if isAdmin(); }

    // --------- Analytics ---------
    match /analytics/events/{eventId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    match /analytics/themeVotes/events/{voteId} {
      allow create: if true;
      allow read: if isAdmin();
    }

    match /admin/metrics/{metricType}/{group}/{date} {
      allow read: if isAdmin();
    }
    match /admin/metrics/{docId=**} {
      allow read, write: if isAdmin();
    }

    // --------- Threads (Bestie Chat) ---------
    match /threads/{id} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /threads/{id}/replies/{rid} {
      allow read: if true;
      allow create: if isAuthed() && get(/databases/$(database)/documents/threads/$(id)).data.locked != true;
      allow update, delete: if isAdmin() || (isAuthed() && request.auth.uid == resource.data.uid);
    }

    match /threads/{id}/reactions/{uidType} {
      allow read: if true;
      allow create, delete: if isAuthed()
        && request.auth.uid == uidType.split('_')[0]
        && get(/databases/$(database)/documents/threads/$(id)).data.locked != true;
      allow update: if false;
    }

    // --------- Boards (Group Reads) ---------
    match /{anyPath=**}/boards/{boardId} {
      allow read: if boardDocIsPublicRead() || boardDocIsOwnerRead() || isAdmin();
      allow write: if boardDocIsOwnerWrite() || isAdmin();
    }

    match /{path=**}/items/{anyItem} {
      allow read: if isOwner() || isAdmin();
    }

    // --------- Global Content (Legacy) ---------
    match /closet/{docId} {
      allow read: if (hasVisibility(resource.data) && resource.data.visibility == 'public') || isOwner() || isAdmin();
      allow create: if (creatingOwn() || isAdmin()) && hasVisibility(request.resource.data);
      allow update: if (isOwner() || isAdmin()) && hasVisibility(request.resource.data);
      allow delete: if isOwner() || isAdmin();
    }

    match /voice/{docId} {
      allow read: if true;
      allow create: if isCreator() && creatingOwn() && hasVisibility(request.resource.data);
      allow update, delete: if (isCreator() && isOwner()) || isAdmin();
    }

    match /episodes/{docId} {
      allow read: if true;
      allow create: if isCreator() && creatingOwn() && hasVisibility(request.resource.data);
      allow update, delete: if (isCreator() && isOwner()) || isAdmin();
    }

    // --------- Global Admin Content ---------
    match /contentFiles/{categoryId} {
      allow write: if isAdmin();
      allow read: if isAdmin();

      match /folders/{folderId} {
        allow read, write: if isAdmin();
        match /items/{itemId} {
          allow read, write: if isAdmin();
        }
      }
    }

    // --------- Final Catch-All (admin-only) ---------
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
